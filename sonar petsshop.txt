pipeline{
    agent any
    tools {
        jdk 'jdk17'
        maven 'maven3'
    }
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
    }
    stages{
        stage ('clean Workspace'){
            steps{
                cleanWs()
            }
        }
        stage ('checkout scm') {
            steps {
                git 'https://github.com/Venn1991/jpetstore-6.git'
            }
        }
        stage ('maven compile') {
            steps {
                sh 'mvn clean compile'
            }
        }
        stage ('maven Test') {
            steps {
                sh 'mvn test'
            }
        }
        stage("Sonarqube Analysis "){
            steps{
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Petshop \
                    -Dsonar.java.binaries=. \
                    -Dsonar.projectKey=Petshop '''
                }
            }
        }
        stage("quality gate"){
            steps {
                script {
                  waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token' 
                }
           }
        }
stage ('Build war file'){
           steps{
               sh 'mvn clean install -DskipTests=true'
           }
       }
       stage("OWASP Dependency Check"){
           steps{
               dependencyCheck additionalArguments: '--scan ./ --format XML ', odcInstallation: 'DP-Check'
              dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
           }
       }
        
    stage ('Build and push to docker hub'){
           steps{
               script{
                   withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                       sh "docker build -t petshop ."
                       sh "docker tag petshopimagid devopsvmr/petshop:latest"
                       sh "docker push devopsvmr/petshop: latest"
                  }
               }
           }
       }
        
    
        stage ('Build docker image'){     
            steps{
                script{
                    sh 'docker image build -t nagasiva395/petsshop:latest .'
                }
            }
                }
        stage ('Push image'){
            steps{
                script{
                    withCredentials([string(credentialsId: 'nagasiva395', variable: 'kondal')]) {
                    sh "docker login -u nagasiva395 -p ${kondal} "
                    }
                    sh "docker image push nagasiva395/petsshop:latest"
                }
            }
        }
    }
}